# Generated by Django 4.2.7 on 2023-12-03 22:17

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Fixture',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('timestamp', models.PositiveIntegerField(blank=True, null=True)),
                ('home', models.PositiveIntegerField()),
                ('away', models.PositiveIntegerField()),
                ('date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('age', models.PositiveIntegerField(blank=True, null=True)),
                ('nationality', models.TextField()),
                ('number', models.PositiveIntegerField(blank=True, null=True)),
                ('position', models.TextField(null=True)),
                ('photo', models.TextField(null=True)),
                ('appearences', models.PositiveIntegerField(blank=True, null=True)),
                ('lineups', models.PositiveIntegerField(blank=True, null=True)),
                ('goals', models.PositiveIntegerField(blank=True, null=True)),
                ('conceded', models.PositiveIntegerField(blank=True, null=True)),
                ('assists', models.PositiveIntegerField(blank=True, null=True)),
                ('rating', models.FloatField(default=6.0)),
                ('value', models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('code', models.TextField()),
                ('logo', models.TextField()),
                ('active', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='User_club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('timestamp', models.DateTimeField()),
                ('img', models.TextField(null=True)),
                ('initial_budget', models.FloatField(default=680)),
                ('remaining_budget', models.FloatField(default=0)),
                ('initial_account', models.FloatField(default=0)),
                ('remaining_account', models.FloatField(default=0)),
                ('total_won', models.PositiveIntegerField()),
                ('total_draw', models.PositiveIntegerField()),
                ('total_lost', models.PositiveIntegerField()),
                ('current_points', models.FloatField(default=0)),
                ('attacker_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='a1', to='fmx.player')),
                ('attacker_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='a2', to='fmx.player')),
                ('attacker_3', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='a3', to='fmx.player')),
                ('attacker_4', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='a4', to='fmx.player')),
                ('attacker_5', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='a5', to='fmx.player')),
                ('defender_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='d1', to='fmx.player')),
                ('defender_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='d2', to='fmx.player')),
                ('defender_3', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='d3', to='fmx.player')),
                ('defender_4', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='d4', to='fmx.player')),
                ('defender_5', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='d5', to='fmx.player')),
                ('goalkeeper_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='g1', to='fmx.player')),
                ('goalkeeper_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='g2', to='fmx.player')),
                ('midfielder_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='m1', to='fmx.player')),
                ('midfielder_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='m2', to='fmx.player')),
                ('midfielder_3', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='m3', to='fmx.player')),
                ('midfielder_4', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='m4', to='fmx.player')),
                ('midfielder_5', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='m5', to='fmx.player')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='player',
            name='team_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team', to='fmx.team'),
        ),
    ]
